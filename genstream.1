.\"
.\" Copyright (c) 2004-2009 Silicon Graphics, Inc. All rights reserved.
.\"         By Greg Banks <gnb@sgi.com>
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
.\"
.\" $Id: genstream.1,v 1.7 2009/02/12 05:07:28 gnb.longdrop.melbourne.sgi.com Exp $
.\"
.\" Define stringvar CO as the best approximation to the copyright glyph.
.\" Note that GNU nroff renders \(co nicely, Irix doesn't.
.ie n .ds CO (c)
.el .ds CO \(co
.if \n[.g] .ds CO \(co
.\" Define stringvar TM as the best approximation to the trademark glyph.
.ie n .ds TM (tm)
.el .ds TM \(Tm
.\" Define Ex (Example start) and Ee (Example end) macros
.de Ex
.br

.br
.nf
.RS 4em
..
.de Ee
.RE
.fi
.br
..
.\"
.TH "checkstream" "1" "ASPEN TESTS" "checkstream"
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SH NAME
genstream,checkstream \- data corruption test stream generator and checker
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SH SYNOPSIS
\fBgenstream\fP [\fIoptions\fP] \fIsize\fP > \fIfile\fP
.br
\fBgenstream\fP [\fIoptions\fP] \fIsize\fP \fIfile\fP
.br
\fBgenstream\fP \fB\-\-protocol=tcp\fP [\fIoptions\fP] [\fB\-\-port=\fP\fIport\fP] \fIsize\fP \fIhostname\fP
.br
\fBcheckstream\fP [\fIoptions\fP] \fB\-\-length=\fP\fIsize\fP < \fIfile\fP
.br
\fBcheckstream\fP [\fIoptions\fP] [\fB\-\-loop\fP] \fIfile\fP
.br
\fBcheckstream\fP \fB\-\-protocol=tcp\fP [\fIoptions\fP] [\fB\-\-port=\fP\fIport\fP]
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SH DESCRIPTION
.PP
\fBGenstream\fP and \fBcheckstream\fP are a pair of utilities which are useful
in the diagnosis of file corruption problems, and have proven useful
when dealing with several different NFS corruption problems on IRIX
and Linux.
.PP
The basic theory of operation is as follows.  \fBGenstream\fP generates a
stream of data, which comprises a sequence of carefully constructed
8 byte records.  \fBCheckstream\fP reads such a stream and checks it for
corruption, and emits a report describing which ranges of bytes
were corrupted.
.PP
\fBCheckstream\fP finds bad records using two criteria.
.IP 1. 3em
A record is malformed; the record checksum cannot be verified.
(Note that a record that is completely zero, e.g. due to reading
holes in the file, will be detected this way).
.IP 2. 3em
A well\-formed record is mislocated; the file offset encoded in
the record does not match the file offset at which the record was
read.
.PP
With the \fB--verbose\fP option, \fBcheckstream\fP will report details about
each bad record, including which of these two modes were detected.
Without \fB--verbose\fP, \fBcheckstream\fP reports only the file offset and length of
ranges of bad records.
.PP
The records generated by \fBgenstream\fP have the property that each record's
IP checksum is zero.  This is to prevent UDP or TCP checksumming
detecting corruption problems, so that the corruption propagates up
to higher layers when used with a network filesystem.  The record format is also platform\-agnostic and
time\-independent, so the stream can be generated on any machine at
any time and checked immediately or later on any machine.
.PP
There are several ways to use these utilities, depending on the
test scenario.
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SS NFS Reads
.PP
On the server, generate a known good local file of sufficient size
(choosing the right size is part of the diagnosis procedure, but
usually larger files are better).  The
size and filename are given as arguments to \fBgenstream\fP.
.Ex
server% genstream 16M /export/good.dat
.Ee
.PP
Because you're paranoid, check that the file is indeed good:
.Ex
server% checkstream /export/good.dat
.Ee
.PP
You should see no output.
On the client, copy the file from the server and
check it in a separate step.
.Ex
client% cp /hosts/server/export/good.dat /tmp/wonky.dat
client% checkstream /tmp/wonky.dat
.Ee
.PP
Alternatively, you can run \fBcheckstream\fP directly on
the mounted file.
.Ex
client% checkstream /hosts/server/export/good.dat
.Ee
.PP
The main differences between these two techniques are the availability
of local storage and performance (\fBcheckstream\fP uses lots more
CPU in userspace than cp; this may perturb the bug).  With the second
technique you can use some of the more obscure \fBcheckstream\fP options
such as \fB\-\-direct\fP or \fB\-\-mmap\fP to control the way in which
the kernel is called to get the data; this may be useful for testing
different kernel paths in the NFS client.
.PP
Another useful technique is the \fB--loop\fP option, which reads the
file over and over from the start in a loop, and in addition
to bad record information prints the rate at which errors
were found.  Note that this technique is only useful if the
second and subsequent reads are actually going over the wire
instead of being satisfied from local buffer cache.  So, choosing
the file size correctly (i.e. significantly larger than the
RAM available for the buffer cache) is the key to using \fB\-\-loop\fP.
Alternatively, the \fB\-\-direct\fP option can be used.
.Ex
client% checkstream --loop /hosts/server/export/good.dat
.Ee
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SS NFS Writes
.PP
This is more or less the inverse of the NFS Reads case.
On the client, generate a known good file and copy it the server.
.Ex
client% genstream 16M /tmp/good.dat
client% cp /tmp/good.dat /hosts/server/export/wonky.dat
.Ee
.PP
Alternatively, you can run \fBgenstream\fP directly to a mounted file.
.Ex
client% genstream 16M /hosts/server/export/wonky.dat
.Ee
.PP
On the server, check that the file arrived correctly.
.Ex
server% checkstream /export/wonky.dat
.Ee
.\"
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SS TCP/IP
.PP
Sometimes it is useful to detect corruption occurring at the network
layer, without involving NFS.  To handle this, \fBgenstream\fP's
\fB\-\-protocol=tcp\fP option can be used to write the stream of records
to a client TCP socket instead of to a file.  The same option
can be used with \fBcheckstream\fP to listen for connections on a
TCP server socket and read a stream of records from the socket.
.PP
To test sending to the server, first start \fBcheckstream\fP on the server:
.Ex
server% checkstream --protocol=tcp
.Ee
.PP
and then connect to it with \fBgenstream\fP on the client:
.Ex
client% genstream --protocol=tcp server
.Ee
.\"
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SH OPTIONS
.PP
All \fIsize\fP arguments may be specified as a decimal integer, optionally
followed by a single letter suffix, one of K, M, G or T, indicating a
binary multiple.  For example, \fI16K\fP means \fI16384\fP.  In addition,
the two-letter suffix BB may be used to indicate a basic block
multiple (512 bytes).  All suffixes are case\-insensitive.
.SS Common Options
.PP
Both \fBgenstream\fP and \fBcheckstream\fP accept the following options.
.TP
\fB\-S\fP, \fB\-\-sync\fP
Open files with the O_SYNC flag, which causes writes to the file
to block until the data is on disk.  This should only have an effect
when writing, i.e. in \fBgenstream\fP, but the option is provided
for both programs.  This option has no effect unless a \fIfile\fP
argument is also given.
.TP
\fB\-D\fP, \fB\-\-direct\fP
Open files with the O_DIRECT flag, which bypasses the buffer cache
and reads or writes directly from the filesystem.  When used with NFS
files, only the NFS client's buffer cache is bypassed, not the server's.
This option has no effect unless a \fIfile\fP argument is also given.
.TP
\fB\-M\fP, \fB\-\-mmap\fP
Use \fBmmap\fP(2) to access files instead of the \fBread\fP(2) or
\fBwrite\fP(2) systems calls.  The entire file is mapped.
.TP
\fB\-b\fP \fIsize\fP, \fB\-\-blocksize=\fP\fIsize\fP
Specify the block size for \fBread\fP() and \fBwrite\fP() system calls.
The default is 4096.
.TP
\fB\-s\fP \fIsize\fP, \fB\-\-seek=\fP\fIsize\fP
Seek to the given offset before reading or writing.
.TP
\fB\-T\fP \fItag\fP, \fB\-\-tag=\fP\fItag\fP
This option can be used for marking each record in a stream in a way which
distinguishes between multiple streams, which is useful for detecting cross\-file
data corruption bugs.  Normally each record contains a 48 bit file offset;
when this option is used the top 8 bits of the offset instead stores the given
8 bit \fItag\fP value.  Note that this means that only files up to 1 TiB
in size can be checked if \fB\-T\fP is in use.
.IP
Given the \fB\-T\fP option, \fBgenstream\fP writes the \fItag\fP into every
record.  Given the option, \fBcheckstream\fP will check that each record
contains \fItag\fP.  Without the option, the tag is not written
or checked, and files up to 256 TiB can be checked.
.TP
\fB\-C\fP, \fB\-\-creator\fP
Given this option, \fBgenstream\fP writes larger records which encode the
start time and process id of the \fBgenstream\fP process.
Given this option, \fBcheckstream\fP will read those larger records
and check that the timestamp and process id are consistent throughout the
entire stream.
.IP
This option is useful when the test requires a file to be overwritten
many times, and the failure mode may involve data being leaked from
one run to the next.
.IP
Note that the \fB\-C\fP option given to \fBgenstream\fP and \fBcheckstream\fP
must match, i.e. if one program is given the option the other must
be too or false errors will be issued.
.TP
\fB\-P\fP \fBtcp\fP, \fB\-\-protocol=tcp\fP
Use a TCP socket instead of writing to and reading from files.  For
\fBgenstream\fP, open a client TCP socket to \fIhost\fP and write
stream records to it.  For \fBcheckstream\fP, listen on a server TCP
socket and read stream records from it.
.TP
\fB\-p\fP \fIport\fP, \fB\-\-port=\fP\fIport\fP
Set the TCP port used in \fB\-\-protocol=tcp\fP mode.  By default, port
5000 is used.  In checkstream, the value \fBdynamic\fP results in the kernel
choosing an available port; this is most useful in combination with the
\fB\-\-port\-filename\fP option.  To use multiple \fBcheckstream\fP instances
on a single machine, unique ports should be chosen and specified with this option.
.\"
.SS Genstream Options
.TP
\fB\-t\fP, \fB\-\-no\-truncate\fP
In the second form (with a \fIfile\fP argument given), don't truncate
\fIfile\fP before writing.  Note that in the first form (output to stdout),
the calling shell will have truncated the file before \fBgenstream\fP starts.
.TP
\fB\-u\fP, \fB\-\-unlink\fP
In the second form (with a \fIfile\fP argument given), unlink \fIfile\fP
after opening and before writing.  Note that standard
.SM POSIX
filesystem semantics mean that writes to the file should succeed until
the \fBgenstream\fP finishes, but there is no way for a \fBcheckstream\fP
instance to open the file.
.TP
\fB\-c\fP, \fB\-\-close\fP
In the second form (with a \fIfile\fP argument given), and the \fB\-\-mmap\fP
option given, close the file descriptor after \fBmmap\fP() but before writing
to the mapped memory area.
.\"
.TP
\fB\-\-retry\-eagain\fP
Retry \fIwrite(2)\fP calls to the filesystem which fail with \fIEAGAIN\fP.
This allows testing on FUSE filesystems which can have that behavior.
\fBGenstream\fP will retry each write up to 10 times using exponential backoff,
with the initial delay being 10 milliseconds and doubling on each attempt.
.\"
.SS Checkstream Options
.TP
\fB\-v\fP, \fB\-\-verbose\fP
Emit more messages (repeat the option for more messages).
.TP
\fB\-l\fP \fIsize\fP, \fB\-\-length=\fP\fIsize\fP\fP
In the first form (filter mode, no \fIfile\fP given),
Specify how many bytes of data to check.
.TP
\fB\-L\fP, \fB\-\-loop\fP
In the second form (with a \fIfile\fP argument given), check the data repeatedly
in a loop.  The \fIfile\fP is opened on every iteration.
.TP
\fB\-e\fP, \fB\-\-stop\-on\-error\fP
Exit on first detected record error.  By default, \fBcheckstream\fP will
read until the expected end of the file and report all errors found.
.TP
\fB\-K\fP, \fB\-\-kernel-dump\-on\-error\fP
Cause a kernel dump on first detected
record error.  By default, \fBcheckstream\fP will read until the
expected end of the file and report all errors found.
.TP
\fB\-\-port\-filename=\fP\fIfilename\fP
In TCP server mode, write the TCP port being used to file \fIfilename\fP.
This is most useful when using \fB\-\-port=dynamic\fP to allow the kernel
to choose an available port.
.\"
.\" -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
.SH AUTHOR
.PP
Greg Banks <gnb@fmeh.org>
